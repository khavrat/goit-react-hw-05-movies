{"version":3,"file":"static/js/970.963ed0cd.chunk.js","mappings":"sQAGeA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,gGAE2BC,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,EADkB,oBACEF,EADF,4BAC6BG,EAAAA,IAHxD,cAEUC,EAFV,yBAKWA,EAASC,MALpB,gCAOIC,QAAQC,MAAR,MAPJ,gFAWA,I,UAAA,E,SAX+B,GAAhBR,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,mBCDFS,EAAUC,EAAAA,GAAAA,QAAH,4CAIPC,EAAaD,EAAAA,GAAAA,GAAH,4KAWVE,EAAaF,EAAAA,GAAAA,GAAH,sOAQVG,EAAYH,EAAAA,GAAAA,EAAH,uLAUTI,EAAYJ,EAAAA,GAAAA,EAAH,yF,SCiCtB,EAxDa,WACX,OAA8BK,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOP,EAAP,KAAcU,EAAd,KAEQjB,GAAYkB,EAAAA,EAAAA,MAAZlB,QAeR,OAdAmB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBH,EAAS,MAFQ,SAIUlB,EAAgBC,GAJ1B,OAIXqB,EAJW,OAKjBL,EAAWK,EAAaC,MALP,gDAOjBL,EAAS,KAAMM,SAPE,yDAAH,qDAUlBH,GACD,GAAE,CAACpB,KAGF,UAACQ,EAAD,WACGD,IAAS,mCAAWA,EAAMgB,WAC1BR,GAA8B,IAAnBA,EAAQS,QAClB,SAACd,EAAD,UACGK,EAAQU,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAK,OAC7B,UAAChB,EAAD,WACGgB,EAAMC,cACL,gBACEC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,QAGb,gBACEF,IAAG,iEAA4DF,EAAMI,MACrED,IAAKH,EAAMI,QAGf,SAACnB,EAAD,UAAYe,EAAMI,QAClB,UAAClB,EAAD,0BACa,kBACVc,EAAMK,eAfML,EAAMM,GADM,OAsBjC,SAACpB,EAAD,yDAIP,C,6EC9DD,IAAMX,EAAW,8BACXC,EAAU,kC","sources":["servises/api/getMovieCredits.js","components/cast/Cast.styled.js","components/cast/Cast.jsx","servises/api/baseForGetFunction.js"],"sourcesContent":["import axios from 'axios';\nimport { BASE_URL, API_KEY } from './baseForGetFunction';\n\nasync function getMovieCredits(movieId) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/3/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport default getMovieCredits;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 24px 0;\n`;\n\nexport const CreditList = styled.ul`\nlist-style: none;\npadding: 0;\nmargin: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 50px;\n`;\n\nexport const CreditItem = styled.li`\n  text-align: center;\n  background-color: #ffffff;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  border-radius: 0px 0px 4px 4px;\n`;\n\nexport const ActorName = styled.p`\nmargin:0;\npadding: 10px 8px 5px 8px;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 1.2;\n  letter-spacing: 0.03em;\n  color: rgba(4, 55, 184, 1);\n`;\n\nexport const ActorChar = styled.p`\n  margin: 0;\n  padding: 5px 8px 10px 8px;\n  line-height: 1.5;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport getMovieCredits from '../../servises/api/getMovieCredits';\nimport {\n  Section,\n  CreditList,\n  CreditItem,\n  ActorName,\n  ActorChar,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState(null);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    const fetchCtedits = async () => {\n      try {\n        setError(null);\n\n        const movieCredits = await getMovieCredits(movieId);\n        setCredits(movieCredits.cast);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchCtedits();\n  }, [movieId]);\n\n  return (\n    <Section>\n      {error && <p>Error: {error.message}</p>}\n      {credits && credits.length !== 0 ? (\n        <CreditList>\n          {credits.slice(0, 10).map(actor => (\n            <CreditItem key={actor.id}>\n              {actor.profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                  alt={actor.name}\n                />\n              ) : (\n                <img\n                  src={`http://dummyimage.com/200x300/d5dff2.jpg&text=No+fhoto+${actor.name}`}\n                  alt={actor.name}\n                />\n              )}\n              <ActorName>{actor.name}</ActorName>\n              <ActorChar>\n                Character: <br />\n                {actor.character}\n              </ActorChar>\n            </CreditItem>\n          ))}\n        </CreditList>\n      ) : (\n        <ActorChar>We don't have a cast list for this movie</ActorChar>\n      )}\n    </Section>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string\n};\n\nexport default Cast;\n","const BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '8a9eba837e68269aae614f789a756a23';\n\nexport { BASE_URL, API_KEY };"],"names":["getMovieCredits","movieId","axios","BASE_URL","API_KEY","response","data","console","error","Section","styled","CreditList","CreditItem","ActorName","ActorChar","useState","credits","setCredits","setError","useParams","useEffect","fetchCtedits","movieCredits","cast","message","length","slice","map","actor","profile_path","src","alt","name","character","id"],"sourceRoot":""}