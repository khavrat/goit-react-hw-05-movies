{"version":3,"file":"static/js/324.40687e38.chunk.js","mappings":"8PAoCA,EAlCoB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACrB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAgBA,OACE,kBAAMH,SAXa,SAAAI,GACnBA,EAAEC,iBACGH,EAAYI,OAGfN,EAASE,GAFTK,MAAM,gCANRJ,EAAe,GAWhB,EAGC,WACE,kBAAOK,QAAQ,iBACf,kBACEC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,kBACZC,KAAK,cACLC,MAAOZ,EACPa,SAAU,SAAAX,GAAC,OAAID,EAAeC,EAAEY,OAAOF,MAAMG,cAAlC,KAEb,mBAAQR,KAAK,SAAb,sBAGL,E,SChCKS,EAAW,8BACXC,EAAU,mCAEDC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCC,GAAhC,gGAE2BC,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,mCACiBC,EADjB,kBACkCE,IAH7D,cAEUE,EAFV,yBAKWA,EAASC,MALpB,gCAOIC,QAAQC,MAAR,MAPJ,gFAWA,MAbA,SAE+B,GAAhBN,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,ECyEf,EAzEmB,WAAO,IAAD,EACvB,GAA4BnB,EAAAA,EAAAA,UAAS,MAArC,eAAO0B,EAAP,KAAeC,EAAf,KACA,GAA8B3B,EAAAA,EAAAA,WAAS,GAAvC,eAAO4B,EAAP,KAAgBC,EAAhB,KACA,GAA0B7B,EAAAA,EAAAA,UAAS,MAAnC,eAAOyB,EAAP,KAAcK,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MACXf,EAAS,UAAGY,EAAaI,IAAI,gBAApB,QAAgC,IAO/CC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdR,EAAS,MAFK,SAIYX,EAAgBC,GAJ5B,OAKqB,KAD7BmB,EAJQ,QAKEC,QAAQC,QACtBZ,GAAW,GACXvB,MAAM,4BACN2B,EAAgB,MAEhBJ,GAAW,GACXF,EAAUY,EAAYC,UAXV,gDAcdX,GAAW,GACXC,EAAS,KAAMY,SAfD,QAiBhBb,GAAW,GAjBK,yDAAH,qDAmBXT,EACFkB,IAEAX,EAAU,GAEb,GAAE,CAACP,EAAWa,IAEf,IAIMU,EAAqC,OAAnBT,EAASU,MAEjC,OACE,iCACID,IAAmB,SAAC,EAAD,CAAa5C,SARjB,SAAA8C,GAhCM,IAAAC,EAEzBb,EAD6B,MADJa,EAiCND,GAhCe,CAAEC,MAAAA,GAAU,CAAC,EAiChD,KAOG,2BACGlB,IAAW,sCACXH,IAAS,mCAAWA,EAAMiB,WACf,OAAXhB,IACC,wBACGA,EAAOqB,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMN,MAAO,CAAEO,KAAMjB,GAAxC,SACGc,EAAMI,SAFFJ,EAAME,GADA,UAUvB,SAAC,EAAAG,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C","sources":["components/SearchField.jsx","servises/getSearchMovie.js","pages/MoviesPage.jsx"],"sourcesContent":["import { useState } from 'react';\n\nconst SearchField = ({ onSubmit }) => {\n  const [searchField, setSearchField] = useState('');\n\n  const reset = () => {\n    setSearchField('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!searchField.trim()) {\n      alert('Enter the word to search for');\n    } else {\n      onSubmit(searchField);\n    }\n    reset()\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"searchField\"></label>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie...\"\n        name=\"searchField\"\n        value={searchField}\n        onChange={e => setSearchField(e.target.value.toLowerCase())}\n      ></input>\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchField;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '8a9eba837e68269aae614f789a756a23';\n\nasync function getSearchMovies( movieName ) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/3/search/movie?api_key=${API_KEY}&query=${movieName}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport default getSearchMovies;\n","import { useEffect, useState, Suspense } from 'react';\nimport { useSearchParams, useLocation, Link, Outlet } from 'react-router-dom';\nimport SearchField from 'components/SearchField';\nimport getSearchMovies from '../servises/getSearchMovie';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const location = useLocation();\n  const movieName = searchParams.get('query') ?? '';\n\n  const updateSearchString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setError(null);\n\n        const searchMovie = await getSearchMovies(movieName);\n        if (searchMovie.results.length === 0) {\n          setLoading(false);\n          alert('nothing found, try again');\n          setSearchParams('');\n        } else {\n          setLoading(true);\n          setMovies(searchMovie.results);\n        }\n      } catch (error) {\n        setLoading(false);\n        setError(error.message);\n      }\n      setLoading(false);\n    };\n    if (movieName) {\n      fetchData();\n    } else {\n      setMovies([]);\n    }\n  }, [movieName, setSearchParams]);\n\n  const handleSubmit = SearchField => {\n    updateSearchString(SearchField);\n  };\n\n  const showSearchField = location.state !== null;\n\n  return (\n    <>\n      {!showSearchField && <SearchField onSubmit={handleSubmit} />}\n      <div>\n        {loading && <p>Loading...</p>}\n        {error && <p>Error: {error.message}</p>}\n        {movies !== null && (\n          <ul>\n            {movies.map(movie => (\n              <li key={movie.id}>\n                <Link to={`${movie.id}`} state={{ from: location }}>\n                  {movie.title}\n                </Link>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["onSubmit","useState","searchField","setSearchField","e","preventDefault","trim","alert","htmlFor","type","autoComplete","autoFocus","placeholder","name","value","onChange","target","toLowerCase","BASE_URL","API_KEY","getSearchMovies","movieName","axios","response","data","console","error","movies","setMovies","loading","setLoading","setError","useSearchParams","searchParams","setSearchParams","location","useLocation","get","useEffect","fetchData","searchMovie","results","length","message","showSearchField","state","SearchField","query","map","movie","to","id","from","title","Suspense","fallback"],"sourceRoot":""}