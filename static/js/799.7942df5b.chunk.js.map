{"version":3,"file":"static/js/799.7942df5b.chunk.js","mappings":"+PAGeA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,gGAE2BC,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,EADkB,oBACEF,EADF,4BAC6BG,EAAAA,IAHxD,cAEUC,EAFV,yBAKWA,EAASC,MALpB,gCAOIC,QAAQC,MAAR,MAPJ,gFAWA,M,SAX+B,GAAhBR,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,SC+Cf,EA7Ca,WACX,OAA8BS,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOD,EAAP,KAAcI,EAAd,KAEQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAgBR,OAdAa,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBH,EAAS,MAFQ,SAIUZ,EAAgBC,GAJ1B,OAIXe,EAJW,OAKjBL,EAAWK,EAAaC,MALP,gDAOjBL,EAAS,KAAMM,SAPE,yDAAH,qDAUlBH,GACD,GAAE,CAACd,KAGF,+BACGO,IAAS,mCAAWA,EAAMU,WAC1BR,IACC,wBACGA,EAAQS,MAAM,EAAG,GAAGC,KAAI,SAAAC,GAAK,OAC5B,2BACE,gBACEC,IAAG,yCAAoCD,EAAME,cAC7CC,IAAKH,EAAMI,QAEb,uBAAIJ,EAAMI,QACV,uCAAeJ,EAAMK,eANdL,EAAMM,GADa,QAcvC,C,6EC5CD,IAAMxB,EAAW,8BACXC,EAAU,kC","sources":["servises/api/getMovieCredits.js","components/Cast.jsx","servises/api/baseForGetFunction.js"],"sourcesContent":["import axios from 'axios';\nimport { BASE_URL, API_KEY } from './baseForGetFunction';\n\nasync function getMovieCredits(movieId) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/3/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport default getMovieCredits;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport getMovieCredits from '../servises/api/getMovieCredits';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState(null);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCtedits = async () => {\n      try {\n        setError(null);\n\n        const movieCredits = await getMovieCredits(movieId);\n        setCredits(movieCredits.cast);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchCtedits();\n  }, [movieId]);\n\n  return (\n    <section>\n      {error && <p>Error: {error.message}</p>}\n      {credits && (\n        <ul>\n          {credits.slice(0, 6).map(actor => (\n            <li key={actor.id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                alt={actor.name}\n              />\n              <p>{actor.name}</p>\n              <p>Character: {actor.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string,\n};\n\nexport default Cast;\n","const BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '8a9eba837e68269aae614f789a756a23';\n\nexport { BASE_URL, API_KEY };"],"names":["getMovieCredits","movieId","axios","BASE_URL","API_KEY","response","data","console","error","useState","credits","setCredits","setError","useParams","useEffect","fetchCtedits","movieCredits","cast","message","slice","map","actor","src","profile_path","alt","name","character","id"],"sourceRoot":""}